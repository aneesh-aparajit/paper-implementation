import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.datasets as datasets
from torch.utils.data import DataLoader
import torchvision.transforms as T
from torch.utils.tensorboard import SummaryWriter

class Discriminator(nn.Module):
    def __init__(self, img_dim):
        super(Discriminator, self).__init__()
        self.disc = nn.Sequential(
            nn.Linear(img_dim, 128), 
            nn.LeakyReLU(0.1), 
            nn.Linear(128, 1),
            nn.Sigmoid()
        )
    
    def forward(self, x):
        return self.disc(x)
    

class Generator(nn.Module):
    def __init__(self, latent_dim, img_dim):
        super(Generator, self).__init__()
        self.gen = nn.Sequential(
            nn.Linear(latent_dim, 256), 
            nn.LeakyReLU(0.1), 
            nn.Linear(256, img_dim), 
            nn.Tanh()
        )
        
    def forward(self, x):
        return self.gen(x)
    

device = "cuda" if torch.has_cuda else "cpu"
lr = 3e-4
latent_dim = 64
image_dim = 784
batch_size = 32
num_epochs = 50

disc = Discriminator(image_dim).to(device)
gen = Generator(latent_dim, image_dim).to(device)
fixed_noise = torch.randn((batch_size, latent_dim)).to(device)
transforms = T.Compose([
    T.ToTensor(), 
    T.Normalize((0.5, ), (0.5, ))
])
dataset = datasets.MNIST(root='./dataset', transform=transforms, download=True)
loader = DataLoader(dataset, batch_size=batch_size, shuffle=True)
opt_disc = optim.Adam(disc.parameters(), lr=lr)
opt_gen = optim.Adam(gen.parameters(), lr=lr)
criterion = nn.BCELoss()
writer_fake = SummaryWriter(log_dir=f'runs/GAN_MNIST/fake')
writer_real = SummaryWriter(log_dir=f'runs/GAN_MNIST/real')
step = 0

# Training the model
for epoch in range(num_epochs):
    for batch_idx, (real, _) in enumerate(loader):
        real = real.view(-1, 784).to(device)
        
        ### Train the discriminator: maximize log(D(real)) + log(1-D(G(z)))
        z = torch.randn((batch_size, latent_dim)).to(device)
        # generate fake images from generator
        fake = gen.forward(z) 
        
        # The prediction of the real images for the log(D(real))
        disc_real = disc.forward(real)
        # All the labels are 1 because we know that the real images are real
        lossD_real = criterion(disc_real, torch.ones_like(disc_real))
        # Predict the output from the fake images generated by the generator.
        disc_fake = disc.forward(fake)
        # We find the loss w.r.t. the fake images. The labels are expected to 0 because they are fake images.
        lossD_fake = criterion(disc_fake, torch.zeros_like(disc_fake))
        lossD = (lossD_fake + lossD_real) / 2
        
        # Backprop on the discriminator
        opt_disc.zero_grad()
        lossD.backward(retain_graph=True)
        opt_disc.step()
        
        ### Train the genetor: minimize log(1 - D(G(z))) -> leads to vanishing gradients, thus we use maximize of log(D(G(z)))
        # We have already computed the loss function, we want to re-use that as much as possible. But, the problem with that would be that, the when we use opt.zero_grad() and loss.backward(), the computation graph gets disconnected. Note: This is pretty advanced PyTorch technical stuff.
        # So, what we do instead is that, we use fake.detach() in the discriminator graph. By doing this, when we run the backprop, we won't clear the intermediate calculations.
        # The other thing we can do is, loss.backward(retain_graph=True)
        # fake = G(z), therefore, output = D(fake)
        output = disc(fake).view(-1)
        lossG = criterion(output, torch.ones_like(output))
        opt_gen.zero_grad()
        lossG.backward()
        opt_gen.step()
        
        # Tensorboard code:
        if batch_idx == 0:
            print(
                f"Epoch[{epoch+1}/{num_epochs}] Loss D: {lossD:.4f}, Loss G: {lossG:.4f}"
            )
            
            with torch.no_grad():
                fake = gen(fixed_noise).reshape(-1, 1, 28, 28)
                data = real.reshape(-1, 1, 28, 28)
                image_grid_fake = torchvision.utils.make_grid(fake, normalize=True)
                image_grid_real = torchvision.utils.make_grid(data, normalize=True)
                
                writer_fake.add_image(
                    "MNIST Fake Images", image_grid_fake, global_step=step
                )
                
                writer_real.add_image(
                    "MNIST Real Images", image_grid_real, global_step=step
                ) 
                
                step += 1